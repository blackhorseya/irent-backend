// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/blackhorseya/gocommon/pkg/config"
	"github.com/blackhorseya/gocommon/pkg/log"
	"github.com/blackhorseya/irent/internal/app/irent"
	"github.com/blackhorseya/irent/internal/app/irent/api/restful"
	billing2 "github.com/blackhorseya/irent/internal/app/irent/api/restful/billing"
	"github.com/blackhorseya/irent/internal/app/irent/api/restful/booking"
	"github.com/blackhorseya/irent/internal/app/irent/api/restful/cars"
	"github.com/blackhorseya/irent/internal/app/irent/api/restful/health"
	user2 "github.com/blackhorseya/irent/internal/app/irent/api/restful/user"
	"github.com/blackhorseya/irent/internal/app/irent/biz"
	"github.com/blackhorseya/irent/internal/app/irent/biz/billing"
	repo3 "github.com/blackhorseya/irent/internal/app/irent/biz/billing/repo"
	"github.com/blackhorseya/irent/internal/app/irent/biz/car"
	"github.com/blackhorseya/irent/internal/app/irent/biz/car/repo"
	"github.com/blackhorseya/irent/internal/app/irent/biz/order"
	repo4 "github.com/blackhorseya/irent/internal/app/irent/biz/order/repo"
	"github.com/blackhorseya/irent/internal/app/irent/biz/user"
	repo2 "github.com/blackhorseya/irent/internal/app/irent/biz/user/repo"
	"github.com/blackhorseya/irent/internal/pkg/app"
	"github.com/blackhorseya/irent/internal/pkg/infra/runner"
	"github.com/blackhorseya/irent/internal/pkg/infra/transports/http"
	"github.com/blackhorseya/irent/internal/pkg/infra/transports/restclient"
	"github.com/google/wire"
)

// Injectors from wire.go:

// CreateApp serve caller to create an injector
func CreateApp(path2 string) (*app.Application, error) {
	viper, err := config.New(path2)
	if err != nil {
		return nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, err
	}
	irentOptions, err := irent.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	httpOptions, err := http.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	iHandler := health.NewImpl(logger)
	repoOptions, err := repo.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	httpClient := restclient.NewClient()
	iRepo := repo.NewImpl(repoOptions, httpClient)
	iBiz := car.NewImpl(logger, iRepo)
	carsIHandler := cars.NewImpl(logger, iBiz)
	options2, err := repo2.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	repoIRepo := repo2.NewImpl(options2, httpClient)
	userIBiz := user.NewImpl(logger, repoIRepo)
	userIHandler := user2.NewImpl(logger, userIBiz)
	options3, err := repo3.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	iRepo2 := repo3.NewImpl(options3, httpClient)
	billingIBiz := billing.NewImpl(logger, iRepo2)
	billingIHandler := billing2.NewImpl(logger, billingIBiz)
	orderOptions, err := order.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	options4, err := repo4.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	iRepo3 := repo4.NewImpl(options4, httpClient)
	orderIBiz := order.NewImpl(orderOptions, logger, iRepo3)
	bookingIHandler := booking.NewImpl(logger, orderIBiz)
	initHandlers := restful.CreateInitHandlerFn(iHandler, carsIHandler, userIHandler, billingIHandler, bookingIHandler)
	engine := http.NewRouter(httpOptions, logger, initHandlers)
	server, err := http.New(httpOptions, logger, engine)
	if err != nil {
		return nil, err
	}
	runnerOptions, err := runner.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	runnerRunner := runner.NewImpl(runnerOptions, logger)
	application, err := irent.New(irentOptions, logger, server, runnerRunner)
	if err != nil {
		return nil, err
	}
	return application, nil
}

// wire.go:

var providerSet = wire.NewSet(config.ProviderSet, log.ProviderSet, runner.ProviderSet, restclient.ProviderSet, http.ProviderSet, irent.ProviderSet, restful.ProviderSet, biz.ProviderSet)
