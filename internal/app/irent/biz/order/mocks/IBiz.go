// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	contextx "github.com/blackhorseya/gocommon/pkg/contextx"
	mock "github.com/stretchr/testify/mock"

	pb "github.com/blackhorseya/irent/pb"

	testing "testing"

	user "github.com/blackhorseya/irent/internal/pkg/entity/user"
)

// IBiz is an autogenerated mock type for the IBiz type
type IBiz struct {
	mock.Mock
}

// BookCar provides a mock function with given fields: ctx, id, projID, _a3
func (_m *IBiz) BookCar(ctx contextx.Contextx, id string, projID string, _a3 *user.Profile) (*pb.Booking, error) {
	ret := _m.Called(ctx, id, projID, _a3)

	var r0 *pb.Booking
	if rf, ok := ret.Get(0).(func(contextx.Contextx, string, string, *user.Profile) *pb.Booking); ok {
		r0 = rf(ctx, id, projID, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Booking)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, string, string, *user.Profile) error); ok {
		r1 = rf(ctx, id, projID, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelBooking provides a mock function with given fields: ctx, id, _a2
func (_m *IBiz) CancelBooking(ctx contextx.Contextx, id string, _a2 *user.Profile) error {
	ret := _m.Called(ctx, id, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(contextx.Contextx, string, *user.Profile) error); ok {
		r0 = rf(ctx, id, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id, _a2
func (_m *IBiz) GetByID(ctx contextx.Contextx, id string, _a2 *user.Profile) (*pb.OrderInfo, error) {
	ret := _m.Called(ctx, id, _a2)

	var r0 *pb.OrderInfo
	if rf, ok := ret.Get(0).(func(contextx.Contextx, string, *user.Profile) *pb.OrderInfo); ok {
		r0 = rf(ctx, id, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.OrderInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, string, *user.Profile) error); ok {
		r1 = rf(ctx, id, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, start, end, _a3
func (_m *IBiz) List(ctx contextx.Contextx, start int, end int, _a3 *user.Profile) ([]*pb.OrderInfo, error) {
	ret := _m.Called(ctx, start, end, _a3)

	var r0 []*pb.OrderInfo
	if rf, ok := ret.Get(0).(func(contextx.Contextx, int, int, *user.Profile) []*pb.OrderInfo); ok {
		r0 = rf(ctx, start, end, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pb.OrderInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, int, int, *user.Profile) error); ok {
		r1 = rf(ctx, start, end, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIBiz creates a new instance of IBiz. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewIBiz(t testing.TB) *IBiz {
	mock := &IBiz{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
