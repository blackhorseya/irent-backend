// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	contextx "github.com/blackhorseya/irent/internal/pkg/base/contextx"
	mock "github.com/stretchr/testify/mock"

	pb "github.com/blackhorseya/irent/pb"
)

// IBiz is an autogenerated mock type for the IBiz type
type IBiz struct {
	mock.Mock
}

// BookCar provides a mock function with given fields: ctx, id, projID, user
func (_m *IBiz) BookCar(ctx contextx.Contextx, id string, projID string, user *pb.Profile) (*pb.Booking, error) {
	ret := _m.Called(ctx, id, projID, user)

	var r0 *pb.Booking
	if rf, ok := ret.Get(0).(func(contextx.Contextx, string, string, *pb.Profile) *pb.Booking); ok {
		r0 = rf(ctx, id, projID, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Booking)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, string, string, *pb.Profile) error); ok {
		r1 = rf(ctx, id, projID, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelBooking provides a mock function with given fields: ctx, id, user
func (_m *IBiz) CancelBooking(ctx contextx.Contextx, id string, user *pb.Profile) error {
	ret := _m.Called(ctx, id, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(contextx.Contextx, string, *pb.Profile) error); ok {
		r0 = rf(ctx, id, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id, user
func (_m *IBiz) GetByID(ctx contextx.Contextx, id string, user *pb.Profile) (*pb.OrderInfo, error) {
	ret := _m.Called(ctx, id, user)

	var r0 *pb.OrderInfo
	if rf, ok := ret.Get(0).(func(contextx.Contextx, string, *pb.Profile) *pb.OrderInfo); ok {
		r0 = rf(ctx, id, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.OrderInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, string, *pb.Profile) error); ok {
		r1 = rf(ctx, id, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, start, end, user
func (_m *IBiz) List(ctx contextx.Contextx, start int, end int, user *pb.Profile) ([]*pb.OrderInfo, error) {
	ret := _m.Called(ctx, start, end, user)

	var r0 []*pb.OrderInfo
	if rf, ok := ret.Get(0).(func(contextx.Contextx, int, int, *pb.Profile) []*pb.OrderInfo); ok {
		r0 = rf(ctx, start, end, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pb.OrderInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, int, int, *pb.Profile) error); ok {
		r1 = rf(ctx, start, end, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
