// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	contextx "github.com/blackhorseya/gocommon/pkg/contextx"
	mock "github.com/stretchr/testify/mock"

	user "github.com/blackhorseya/irent/internal/pkg/entity/user"
)

// IRepo is an autogenerated mock type for the IRepo type
type IRepo struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, id, password
func (_m *IRepo) Login(ctx contextx.Contextx, id string, password string) (*user.Profile, error) {
	ret := _m.Called(ctx, id, password)

	var r0 *user.Profile
	if rf, ok := ret.Get(0).(func(contextx.Contextx, string, string) *user.Profile); ok {
		r0 = rf(ctx, id, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Profile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, string, string) error); ok {
		r1 = rf(ctx, id, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRepo creates a new instance of IRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRepo(t mockConstructorTestingTNewIRepo) *IRepo {
	mock := &IRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
